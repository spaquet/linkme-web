---
export interface Props {
  variant?: 'primary' | 'secondary' | 'outline' | 'text';
  size?: 'sm' | 'md' | 'lg';
  href?: string;
  class?: string;
  [propName: string]: any;
}

const {
  variant = 'primary',
  size = 'md',
  href,
  class: className = '',
  ...rest
} = Astro.props;

// Variant styles
const variants = {
  primary: 'bg-indigo-600 hover:bg-indigo-700 text-white border border-indigo-600',
  secondary: 'bg-gray-100 hover:bg-gray-200 text-gray-800 border border-gray-200 dark:bg-gray-700 dark:hover:bg-gray-600 dark:text-white dark:border-gray-700',
  outline: 'bg-transparent hover:bg-gray-50 text-indigo-600 border border-indigo-600 dark:text-indigo-400 dark:border-indigo-400 dark:hover:bg-gray-800',
  text: 'bg-transparent hover:bg-gray-50 text-indigo-600 border border-transparent dark:text-indigo-400 dark:hover:bg-gray-800'
};

// Size styles
const sizes = {
  sm: 'text-xs py-1.5 px-3 rounded',
  md: 'text-sm py-2 px-4 rounded-lg',
  lg: 'text-base py-2.5 px-5 rounded-lg',
};

const classes = `
  ${variants[variant]}
  ${sizes[size]}
  inline-flex items-center justify-center font-medium transition-colors duration-200
  focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500
  ${className}
`;

const Element = href ? 'a' : 'button';
---

<Element
  href={href}
  class:list={[classes]}
  {...rest}
>
  <slot />
</Element>